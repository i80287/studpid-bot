from __future__ import annotations
from typing import TYPE_CHECKING
if TYPE_CHECKING:
    from datetime import datetime
    from typing import Literal

    from nextcord import (
        Role,
        Guild,
    )
    from storebot.storebot import StoreBot

from nextcord import (
    User,
    Embed,
    Emoji,
    Colour,
    Member,
    SlashOption,
    Status,
    slash_command,
    Locale,
    Interaction
)
from nextcord.ext.commands import Cog
from storebot.Tools import db_commands
from storebot.Tools.parse_tools import parse_emoji


class AdditionalCommandsCog(Cog):
    text_slash: dict[int, dict[int, str]] = {
        0: {
            0: "Error",
            1: "Help menu",
            2: "Choose a category",
            3: "Top members by level",
            4: "Page 1 from ",
            5: " place",
            6: " level",
            7: "Level info for {}",
            8: "Level",
            9: "Experience",
            10: "Place in the rating",
            11: "Emoji",
            12: "**`Please, select emoji from any discord server where the bot is added`**",
            13: "Information about the server",
            14: "Server's id - ",
            15: "**`Sorry, but you can't mute yourself`**",
            16: "**`Mute-role isn't selected in the bot's settings`**",
            17: "**`Bot doesn't have permission to manage roles on the server`**",
            18: "**`Bot doesn't have permission to manage this role. Bot's role should be higher than this role`**",
            19: "**`Selected in the bot's settings mute-role hasn't been found on the server`**",
            20: "Member was muted",
            21: "**`You gave timeout to the `**{}\n**`for {} hours, {} minutes, {} seconds`**",
            #22: "**`Member `**{}**` already has mute-role`**",
            #23: "Current mute-role",
            #24: "**`Selected in the settings mute-role: `**{}\n",
            #25: "**`Selected mute-role: `**{}\n",
            #26: "**`Mute-role was reseted`**",
            22: "**`Bot can't mute selected member. Please, report server admin about that (for example, `**<@594845341484974100>**`)`**",
            23: "Member was unmuted",
            24: "**`You retracted timeout from the `**{}",
            27: "Current ignored channels",
            28: "**`No channel was selected`**",
            29: "{}**` was added to the list of ignored channels`**",
            30: "{}**` already in the list of ignored channels`**",
            31: "{}**` was removed from the list of ignored channels`**",
            32: "**`Channel `**{}**` wasn't found in the list of ignored channels`**",
            33: "Current notification channel",
            34: "**`No notification channel was selected`**",
            35: "**`Selected in the settings notification channel: `**{}\n",
            36: "**`Selected notification channel: `**{}",
            37: "**`Notification channel was reseted`**",
            38: "**`This user not found on the server`**",
            39: "**`Please, use correct arguments for command`**",
            40: "**`This command not found`**",
            41: "**`This user not found`**",
            42: "**`This role not found`**",
            43: "**`This channel not found`**",
            44: "**`Please, wait before reusing this command`**",
            50: "**`Sorry, but you don't have enough permissions to use this command`**",
            51: "**`Default Discord emoji: `**{}",
        },
        1: {
            0: "–û—à–∏–±–∫–∞",
            1: "–ú–µ–Ω—é –ø–æ–º–æ—â–∏",
            2: "–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é",
            3: "–¢–æ–ø –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –ø–æ —É—Ä–æ–≤–Ω—é",
            4: "–°—Ç—Ä–∞–Ω–∏—Ü–∞ 1 –∏–∑ ",
            5: " –º–µ—Å—Ç–æ",
            6: " —É—Ä–æ–≤–µ–Ω—å",
            7: "–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ–± —É—Ä–æ–≤–Ω–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {}",
            8: "–£—Ä–æ–≤–µ–Ω—å",
            9: "–û–ø—ã—Ç",
            10: "–ú–µ—Å—Ç–æ –≤ —Ä–µ–π—Ç–∏–Ω–≥–µ",
            11: "–≠–º–æ–¥–∑–∏",
            12: "**`–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–∫–∞–∂–∏—Ç–µ —ç–º–æ–¥–∑–∏ —Å –¥–∏—Å–∫–æ—Ä–¥ —Å–µ—Ä–≤–µ—Ä–∞, –Ω–∞ –∫–æ—Ç–æ—Ä–æ–º –µ—Å—Ç—å –±–æ—Ç`**",
            13: "–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Å–µ—Ä–≤–µ—Ä–µ",
            14: "Id —Å–µ—Ä–≤–µ—Ä–∞ - ",
            15: "**`–ò–∑–≤–∏–Ω–∏—Ç–µ, –Ω–æ –í—ã –Ω–µ –º–æ–∂–µ—Ç–µ –∑–∞–º—å—é—Ç–∏—Ç—å —Å–∞–º–æ–≥–æ —Å–µ–±—è`**",
            16: "**`–ú—É—Ç-—Ä–æ–ª—å –Ω–µ –≤—ã–±—Ä–∞–Ω–∞ –≤ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞—Ö —Å–µ—Ä–≤–µ—Ä–∞`**",
            17: "**`–£ –±–æ—Ç–∞ –Ω–µ—Ç –ø—Ä–∞–≤–∞ —É–ø—Ä–∞–≤–ª—è—Ç—å —Ä–æ–ª—è–º–∏ –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ`**",
            18: "**`–£ –±–æ—Ç–∞ –Ω–µ—Ç –ø—Ä–∞–≤ —É–ø—Ä–∞–≤–ª—è—Ç—å —ç—Ç–æ–π —Ä–æ–ª—å—é. –†–æ–ª—å –±–æ—Ç–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –≤—ã—à–µ, —á–µ–º —É–∫–∞–∑–∞–Ω–Ω–∞—è –í–∞–º–∏ —Ä–æ–ª—å`**",
            19: "**`–£–∫–∞–∑–∞–Ω–Ω–∞—è –≤ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞—Ö –±–æ—Ç–∞ –º—É—Ç-—Ä–æ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ`**",
            20: "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –±—ã–ª –∑–∞–º—å—é—á–µ–Ω",
            21: "**`–í—ã –≤—ã–¥–∞–ª–∏ —Ç–∞–π–º–∞—É—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é `**{}\n**`–Ω–∞ {} —á–∞—Å–æ–≤, {} –º–∏–Ω—É—Ç, {} —Å–µ–∫—É–Ω–¥`**",
            #22: "**`–£ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è `**{}**` —É–∂–µ –µ—Å—Ç—å –º—É—Ç-—Ä–æ–ª—å`**",
            #23: "–¢–µ–∫—É—â–∞—è –º—É—Ç-—Ä–æ–ª—å",
            #24: "**`–£–∫–∞–∑–∞–Ω–Ω–∞—è –≤ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞—Ö –º—É—Ç-—Ä–æ–ª—å: `**{}\n",
            #25: "**`–í—ã–±—Ä–∞–Ω–Ω–∞—è –í–∞–º–∏ –º—É—Ç-—Ä–æ–ª—å: `**{}",
            #26: "**`–ú—É—Ç-—Ä–æ–ª—å –±—ã–ª–∞ —Å–±—Ä–æ—à–µ–Ω–∞`**",
            22: "**`–ë–æ—Ç –Ω–µ –º–æ–∂–µ—Ç –≤—ã–¥–∞—Ç—å —Ç–∞–π–º–∞—É—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —Å–æ–æ–±—â–∏—Ç–µ –æ–± —ç—Ç–æ–º –∞–¥–º–∏–Ω—É (–Ω–∞–ø—Ä–∏–º–µ—Ä, `**<@594845341484974100>**`)`**",
            23: "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –±—ã–ª —Ä–∞–∑–º—å—é—á–µ–Ω",
            24: "**`–í—ã —Å–Ω—è–ª–∏ —Ç–∞–π–º–∞—É—Ç —Å `**{}",
            27: "–¢–µ–∫—É—â–∏–µ –∏–≥–Ω–æ—Ä–∏—Ä—É–µ–º—ã–µ –∫–∞–Ω–∞–ª—ã",
            28: "**`–ù–µ –≤—ã–±—Ä–∞–Ω–æ –Ω–∏ –æ–¥–Ω–æ–≥–æ –∫–∞–Ω–∞–ª–∞`**",
            29: "{}**` –±—ã–ª –¥–æ–±–∞–≤–ª–µ–Ω –≤ —Å–ø–∏—Å–æ–∫ –∏–≥–Ω–æ—Ä–∏—Ä—É–µ–º—ã—Ö –∫–∞–Ω–∞–ª–æ–≤`**",
            30: "{}**` —É–∂–µ –≤ —Å–ø–∏—Å–∫–µ –∏–≥–Ω–æ—Ä–∏—Ä—É–µ–º—ã—Ö –∫–∞–Ω–∞–ª–æ–≤`**",
            31: "{}**` –±—ã–ª —É–±—Ä–∞–Ω –∏–∑ —Å–ø–∏—Å–∫–∞ –∏–≥–Ω–æ—Ä–∏—Ä—É–µ–º—ã—Ö –∫–∞–Ω–∞–ª–æ–≤`**",
            32: "{}**` –Ω–µ—Ç –≤ —Å–ø–∏—Å–∫–µ –∏–≥–Ω–æ—Ä–∏—Ä—É–µ–º—ã—Ö –∫–∞–Ω–∞–ª–æ–≤`**",
            33: "–¢–µ–∫—É—â–∏–π –∫–∞–Ω–∞–ª –¥–ª—è –æ–ø–æ–≤–µ—â–µ–Ω–∏–π",
            34: "**`–ù–µ –≤—ã–±—Ä–∞–Ω–æ –Ω–∏ –æ–¥–Ω–æ–≥–æ –∫–∞–Ω–∞–ª–∞`**",
            35: "**`–£–∫–∞–∑–∞–Ω–Ω—ã–π –≤ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞—Ö –∫–∞–Ω–∞–ª: `**{}\n",
            36: "**`–í—ã–±—Ä–∞–Ω–Ω—ã–π –í–∞–º–∏ –∫–∞–Ω–∞–ª: `**{}",
            37: "**`–ö–∞–Ω–∞–ª –±—ã–ª —Å–±—Ä–æ—à–µ–Ω`**",
            38: "**`–ù–∞ —Å–µ—Ä–≤–µ—Ä–µ –Ω–µ –Ω–∞–π–¥–µ–Ω —Ç–∞–∫–æ–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å`**",
            39: "**`–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–∫–∞–∂–∏—Ç–µ –≤–µ—Ä–Ω—ã–µ –∞—Ä–≥—É–º–µ–Ω—Ç—ã –∫–æ–º–∞–Ω–¥—ã`**",
            40: "**`–¢–∞–∫–∞—è –∫–æ–º–∞–Ω–¥–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞`**",
            41: "**`–¢–∞–∫–æ–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω`**",
            42: "**`–¢–∞–∫–∞—è —Ä–æ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω–∞`**",
            43: "**`–¢–∞–∫–æ–π –∫–∞–Ω–∞–ª –Ω–µ –Ω–∞–π–¥–µ–Ω`**",
            44: "**`–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–¥–æ–∂–¥–∏—Ç–µ –ø–µ—Ä–µ–¥ –ø–æ–≤—Ç–æ—Ä–Ω—ã–º –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º –∫–æ–º–∞–Ω–¥—ã`**",
            50: "**`–ò–∑–≤–∏–Ω–∏—Ç–µ, –Ω–æ —É –í–∞—Å –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø—Ä–∞–≤ –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã`**",
            51: "**`–î–µ—Ñ–æ–ª—Ç–Ω–æ–µ —ç–º–æ–¥–∑–∏ –î–∏—Å–∫–æ—Ä–¥–∞: `**{}"
        }
    }
    emojis = (
        "üë§", "<:bot:995804039000359043>", "<:sum:995804781006290974>",
        "<:text:995806008960094239>", "<:voice:995804037351997482>", "<:summ:995804781006290974>", 
        "<a:emoji:995806881048170518>", "<:sticker:995806680505921639>",  "<:summ:995804781006290974>",
        "<:online:995823257993363587>", "<:idle:995823256621813770>", "<:dnd:995823255199957032>", "<:offline:995823253878738944>"
    )
    months: dict[int, list[str]] = {
        0: ["January {}", "February {}", "Mart {}", "April {}", "May {}", "June {}", "Jule {}", "August {}", "September {}", "October {}", "November {}", "December {}"],
        1: ["{} –Ø–Ω–≤–∞—Ä—è", "{} –§–µ–≤—Ä–∞–ª—è", "{} –ú–∞—Ä—Ç–∞", "{} –ê–ø—Ä–µ–ª—è", "{} –ú–∞—è", "{} –ò—é–Ω—è", "{} –ò—é–ª—è", "{} –ê–≤–≥—É—Å—Ç–∞", "{} –°–µ–Ω—Ç—è–±—Ä—è", "{} –û–∫—Ç—è–±—Ä—è", "{} –ù–æ—è–±—Ä—è", "{} –î–µ–∫–∞–±—Ä—è"]
    }
    server_info_text: dict[int, dict[int, str]] = {
        0: {
            0: "Members' info",
            1: "Users",
            2: "Bots", 
            3: "Total",
            4: "Channels",
            5: "Text channels",
            6: "Voice channels",
            7: "Total",
            8: "Emojis and stickers",
            9: "Emojis",
            10: "Stickers",
            11: "Total",
            12: "Members' status",
            13: "Online",
            14: "Idle",
            15: "Dnd",
            16: "Offline",
            17: "Creation date",
            18: "Verification level",
            19: "Files' size limit",
            20: "Server's boosters and boost level"
        },
        1: {
            0: "–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ–± —É—á–∞—Å—Ç–Ω–∏–∫–∞—Ö",
            1: "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π",
            2: "–ë–æ—Ç–æ–≤",
            3: "–í—Å–µ–≥–æ",
            4: "–ö–∞–Ω–∞–ª—ã",
            5: "–¢–µ–∫—Å—Ç–æ–≤—ã—Ö –∫–∞–Ω–∞–ª–æ–≤",
            6: "–ì–æ–ª–æ—Å–æ–≤—ã—Ö –∫–∞–Ω–∞–ª–æ–≤",
            7: "–í—Å–µ–≥–æ",
            8: "–≠–º–æ–¥–∑–∏ –∏ —Å—Ç–∏–∫–µ—Ä—ã",
            9: "–≠–º–æ–¥–∑–∏",
            10: "–°—Ç–∏–∫–µ—Ä–æ–≤",
            11: "–í—Å–µ–≥–æ",
            12: "–°—Ç–∞—Ç—É—Å —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤",
            13: "–û–Ω–ª–∞–π–Ω",
            14: "–ù–µ–∞–∫—Ç–∏–≤–Ω—ã",
            15: "–ù–µ –±–µ—Å–ø–æ–∫–æ–∏—Ç—å",
            16: "–û—Ñ—Ñ–ª–∞–π–Ω",
            17: "–î–∞—Ç–∞ —Å–æ–∑–¥–∞–Ω–∏—è",
            18: "–£—Ä–æ–≤–µ–Ω—å –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏–∏",
            19: "–õ–∏–º–∏—Ç —Ä–∞–∑–º–µ—Ä–∞ –∑–∞–≥—Ä—É–∂–∞–µ–º—ã—Ö —Ñ–∞–π–ª–æ–≤",
            20: "–ë—É—Å—Ç–µ—Ä—ã —Å–µ—Ä–≤–µ—Ä–∞ –∏ —É—Ä–æ–≤–µ–Ω—å –±—É—Å—Ç–∞"
        }
    }
    member_info_description_lines: dict[int, dict[int, str]] = {
        0: {
            0: "**User:** <@{0}> **`{0}`**",
            1: "**Pfp url is:** [Link to php]({0})",
            2: "**Creation date: `{0}`**",
            3: "**Join server at: `{0}`**",
            4: "**Nick on the server: `{0}`**",
            5: "**Status: `{0}`**",
            6: "**Status:** {0}",
            7: "**Activity: `{0}`**",
            8: "**`User is a bot`**",
            9: "**`User is not a bot`**",
            10: "**`Member's roles:`**"
        },
        1: {
            0: "**–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å:** <@{0}> **`{0}`**",
            1: "**URL –∞–≤–∞—Ç–∞—Ä–∫–∏:** [–°—Å—ã–ª–∫–∞]({0})",
            2: "**–î–∞—Ç–∞ —Å–æ–∑–¥–∞–Ω–∏—è: `{0}`**",
            3: "**–ü—Ä–∏—Å–æ–µ–¥–∏–Ω–∏–ª—Å—è –∫ —Å–µ—Ä–≤–µ—Ä—É: `{0}`**",
            4: "**–ù–∏–∫ –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ: `{0}`**",
            5: "**–°—Ç–∞—Ç—É—Å: `{0}`**",
            6: "**–°—Ç–∞—Ç—É—Å:** {0}",
            7: "**–ê–∫—Ç–∏–≤–Ω–æ—Å—Ç—å: `{0}`**",
            8: "**`–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å - –±–æ—Ç`**",
            9: "**`–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –±–æ—Ç`**",
            10: "**`–†–æ–ª–∏ —É—á–∞—Å—Ç–Ω–∏–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞:`**"
        }
    }

    def __init__(self, bot: StoreBot) -> None:
        self.bot: StoreBot = bot
    
    @slash_command(
        name="emoji", 
        description="Fetchs emoji's info",
        description_localizations={
            Locale.ru: "–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —ç–º–æ–¥–∑–∏"
        },
        dm_permission=False
    )
    async def emoji(
        self, 
        interaction: Interaction, 
        emoji_str: str = SlashOption(
            name="emoji",
            description="Select emoji or it's id from any discord server, where bot is added", 
            description_localizations={
                Locale.ru: "–í—ã–±–µ—Ä–∏—Ç–µ —ç–º–æ–¥–∑–∏ –∏–ª–∏ –µ–≥–æ id c –ª—é–±–æ–≥–æ –¥–∏—Å–∫–æ—Ä–¥ —Å–µ—Ä–≤–µ—Ä–∞, –≥–¥–µ –µ—Å—Ç—å –±–æ—Ç"
            },
            required=True
        )
    ) -> None:
        assert interaction.guild_id is not None
        assert interaction.guild is not None
        assert interaction.locale is not None
        assert isinstance(interaction.user, Member)
        lng: Literal[1, 0] = 1 if "ru" in interaction.locale else 0
        await db_commands.check_member_async(guild_id=interaction.guild_id, member_id=interaction.user.id)

        emoji: Emoji | str | None = parse_emoji(self.bot, emoji_str)        
        if emoji is None:
            emb: Embed = Embed(title=self.text_slash[lng][0], colour=Colour.red(), description=self.text_slash[lng][12])
            await interaction.response.send_message(embed=emb, ephemeral=True)
        elif isinstance(emoji, Emoji):
            emoji_url: str = emoji.url + "?quality=lossless"
            emoji_raw_str: str = emoji.__str__()
            created_at: str = emoji.created_at.strftime("%d/%m/%Y, %H:%M:%S")
            emb = Embed(
                title=self.text_slash[lng][11], 
                description=f"**`Emoji:`** {emoji_raw_str}\n\
                            **`Raw string:`** \\{emoji_raw_str}\n\
                            **`Emoji id:`** {emoji.id}\n\
                            **`Created at:`** {created_at}\n\
                            **`URL:`** {emoji_url}"
            )
            emb.set_image(url=emoji_url)
            await interaction.response.send_message(embed=emb)
        else:
            emb = Embed(description=self.text_slash[lng][51].format(emoji))
            await interaction.response.send_message(embed=emb)
    
    @slash_command(
        name="server",
        description="Shows an information about the server",
        description_localizations={
            Locale.ru: "–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Å–µ—Ä–≤–µ—Ä–µ"
        },
        dm_permission=False
    )
    async def server(self, interaction: Interaction) -> None:
        assert interaction.guild_id is not None
        assert interaction.guild is not None
        assert interaction.locale is not None
        assert isinstance(interaction.user, Member)
        lng: Literal[1, 0] = 1 if "ru" in str(interaction.locale) else 0
        await db_commands.check_member_async(guild_id=interaction.guild_id, member_id=interaction.user.id)

        emb: Embed = Embed(title=self.text_slash[lng][13], colour=Colour.dark_purple())
        guild: Guild = interaction.guild

        onl: int = 0; idl: int = 0; dnd: int = 0; ofl: int = 0
        for m in guild.members:
            st: Status | str = m.status
            if st == Status.online:
                onl += 1
            elif st == Status.idle:
                idl += 1
            elif st == Status.dnd:
                dnd += 1
            else:
                ofl += 1

        ca: datetime = guild.created_at
        time: str = f"{ca.strftime('%Y-%m-%d %H:%M:%S')}\n{self.months[lng][ca.month-1].format(ca.day)}, {ca.year}"
        
        vls: list[int | str] = [len(guild.humans), len(guild.bots), len(guild.text_channels), len(guild.voice_channels), len(guild.emojis), len(guild.stickers),
        time, guild.verification_level, guild.filesize_limit >> 20, f"`{len(guild.premium_subscribers)}` - `{guild.premium_tier}{self.text_slash[lng][6]}`"]

        if guild.icon is not None:
            emb.set_thumbnail(url=guild.icon.url)
        
        lc_s: dict[int, str] = self.server_info_text[lng]
        i: int = 0
        emb.add_field(name=lc_s[i * 4], value=f"{self.emojis[i*3]}`{lc_s[i * 4 + 1]}` - `{vls[i * 2]}`\n{self.emojis[i*3+1]}`{lc_s[i * 4 + 2]}` - `{vls[i * 2 + 1]}`\
        \n{self.emojis[i*3+2]}`{lc_s[i * 4 + 3]}` - `{vls[i * 2] + vls[i * 2 + 1]}`") # type: ignore

        emb.add_field(name=lc_s[12], value=f"{self.emojis[9]}`{lc_s[13]}` - `{onl}`\n{self.emojis[10]}`{lc_s[14]}` - `{idl}`\n{self.emojis[11]}`{lc_s[15]}` - `{dnd}`\n{self.emojis[12]}`{lc_s[16]}` - `{ofl}`")

        for i in (1, 2):
            emb.add_field(name=lc_s[i * 4], value=f"{self.emojis[i*3]}`{lc_s[i * 4 + 1]}` - `{vls[i * 2]}`\n{self.emojis[i*3+1]}`{lc_s[i * 4 + 2]}` - `{vls[i * 2 + 1]}`\
            \n{self.emojis[i*3+2]}`{lc_s[i * 4 + 3]}` - `{vls[i * 2] + vls[i * 2 + 1]}`") # type: ignore
        
        for i in (17, 18):
            emb.add_field(name=lc_s[i], value=f"`{vls[i - 11]}`")

        emb.add_field(name=lc_s[19], value=f"`{vls[8]} mb`")
        emb.add_field(name=lc_s[20], value=vls[9])
        emb.set_footer(text=f"{self.text_slash[lng][14]}{guild.id}")

        await interaction.response.send_message(embed=emb)

    @slash_command(
        name="member_info",
        description="Shows info about server member",
        description_localizations={
            Locale.ru: "–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± —É—á–∞—Å—Ç–Ω–∏–∫–µ —Å–µ—Ä–≤–µ—Ä–∞"
        },
        dm_permission=False
    )
    async def member_info(
        self,
        interaction: Interaction,
        member: Member | None = SlashOption(
            name="member",
            description="Member to show info about",
            description_localizations={
                Locale.ru: "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å, –æ –∫–æ—Ç–æ—Ä–æ–º –Ω–∞–¥–æ –ø–æ–∫–∞–∑–∞—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é"
            },
            required=False,
            default=None
        )
    ) -> None:
        assert interaction.guild_id is not None
        assert interaction.guild is not None
        assert interaction.locale is not None
        assert isinstance(interaction.user, Member)
        lng: Literal[1, 0] = 1 if "ru" in interaction.locale else 0
        if not member:
            member = interaction.user
        
        if isinstance(member, User):
            await self.user_info(interaction, member)
            return

        member_id: int = member.id
        await db_commands.check_member_async(guild_id=interaction.guild_id, member_id=member_id)
        info_description_lines: dict[int, str] = self.member_info_description_lines[lng]
        description_lines: list[str] = [
            info_description_lines[0].format(member_id),
            info_description_lines[1].format(member.display_avatar.url),
            info_description_lines[2].format(member.created_at.strftime("%d/%m/%Y %H:%M:%S"))
        ]
        if (joined_at := member.joined_at):
            description_lines.append(info_description_lines[3].format(joined_at.strftime('%d/%m/%Y %H:%M:%S')))
        description_lines.append(info_description_lines[4].format(member.display_name))
        if isinstance(status := member.status, Status):
            description_lines.append(info_description_lines[5].format(status))
        else:
            description_lines.append(info_description_lines[6].format(status))
        if (activities := member.activities):
            activity_report: str = info_description_lines[7]
            description_lines.extend(activity_report.format(name) for activity in activities if (name := activity.name))
        if member.bot:
            description_lines.append(info_description_lines[8])
        else:
            description_lines.append(info_description_lines[9])
        
        g: Guild = interaction.guild
        roles: list[Role] = sorted([role for role_id in member._roles if (role := g.get_role(role_id))])
        if roles:
            description_lines.append(info_description_lines[10])
            description_lines.extend("<@&" + str(role.id) + ">" for role in roles)
        
        emb: Embed = Embed(
            title=member.name + "#" + member.discriminator,
            description = '\n'.join(description_lines),
            colour = member.color
        )
        avatar_url: str = member.display_avatar.url
        emb.set_author(name=member.display_name, url=avatar_url, icon_url=avatar_url)
        emb.set_thumbnail(banner.url if (banner := member.banner) is not None else avatar_url)
        
        await interaction.response.send_message(embed=emb)
    
    @slash_command(
        name="user_info",
        description="Shows info about anu discord user",
        description_localizations={
            Locale.ru: "–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø—Ä–æ–∏–∑–≤–æ–ª—å–Ω–æ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ"
        },
        dm_permission=False
    )
    async def user_info(
        self,
        interaction: Interaction,
        user: User | None = SlashOption(
            name="user",
            description="User or user id to show info about",
            description_localizations={
                Locale.ru: "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∏–ª–∏ –µ–≥–æ id, –æ –∫–æ—Ç–æ—Ä–æ–º –Ω–∞–¥–æ –ø–æ–∫–∞–∑–∞—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é"
            },
            required=False,
            default=None
        )
    ) -> None:
        assert interaction.locale is not None
        assert isinstance(interaction.user, Member)
        lng: Literal[1, 0] = 1 if "ru" in interaction.locale else 0
        if user is None:
            await self.member_info(interaction, interaction.user)
            return

        info_description_lines: dict[int, str] = self.member_info_description_lines[lng]
        user_id: int = user.id
        user_name: str = user.name
        avatar_url: str = user.display_avatar.url
        description_lines: list[str] = [
            info_description_lines[0].format(user_id),
            info_description_lines[1].format(avatar_url),
            info_description_lines[2].format(user.created_at.strftime("%d/%m/%Y %H:%M:%S"))
        ]
        description_lines.append(info_description_lines[8] if user.bot else info_description_lines[9])
        emb: Embed = Embed(
            title=user_name + "#" + user.discriminator,
            description='\n'.join(description_lines),
            colour=user.color
        )

        emb.set_author(name=user_name, url=avatar_url, icon_url=avatar_url)
        emb.set_thumbnail(banner.url if (banner := user.banner) is not None else avatar_url)

        await interaction.response.send_message(embed=emb)


def setup(bot: StoreBot) -> None:
    bot.add_cog(AdditionalCommandsCog(bot))
